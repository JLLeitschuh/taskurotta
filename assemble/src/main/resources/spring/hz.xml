<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring-3.1.xsd">

    <context:property-placeholder/>
    <context:annotation-config/>

    <hz:hazelcast id="hzInstance">
        <hz:config>
            <hz:management-center enabled="${hz.mancenter.enabled}" url="${hz.mancenter.url}"/>

            <hz:properties>
                <hz:property name="hazelcast.logging.type">${hz.logging.type}</hz:property>
                <hz:property name="hazelcast.jmx">${hz.jmx}</hz:property>
                <hz:property name="hazelcast.jmx.detailed">${hz.jmx.detailed}</hz:property>
            </hz:properties>

            <hz:network port="${hz.port}" port-auto-increment="true">
                <hz:join>
                    <hz:multicast enabled="false"/>
                    <hz:tcp-ip enabled="true">
                        <hz:members>${hz.nodes}</hz:members>
                    </hz:tcp-ip>
                </hz:join>
            </hz:network>

            <hz:executor-service name="${hz.dependency.service.name}" pool-size="${hz.dependency.max.pool.size}"/>
            <hz:executor-service name="${hz.decisions.service.name}" pool-size="${hz.decisions.max.pool.size}"/>

            <hz:map name="${hz.task.map.name}" backup-count="0" eviction-policy="LRU" eviction-percentage="25">
            </hz:map>

            <hz:map name="${hz.decision.map.name}" backup-count="0" eviction-policy="LRU" eviction-percentage="25">
            </hz:map>

            <hz:map name="${hz.graph.map.name}" backup-count="0" eviction-policy="LRU" eviction-percentage="25">
            </hz:map>

            <hz:map name="${hz.graph.decision.map.name}" backup-count="0" eviction-policy="LRU" eviction-percentage="25">
            </hz:map>

        </hz:config>
    </hz:hazelcast>

    <!-- REST resources -->
    <bean id="taskPollerResource" class="ru.taskurotta.dropwizard.resources.TaskPollerResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskReleaserResource" class="ru.taskurotta.dropwizard.resources.TaskReleaserResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskStarterResource" class="ru.taskurotta.dropwizard.resources.TaskStarterResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <!-- /REST resources -->

    <!-- Backends -->
    <bean id="queueBackend" class="ru.taskurotta.backend.hz.queue.HzQueueBackend">
        <constructor-arg name="pollDelay" value="${pollDelay}"/>
        <constructor-arg name="pollDelayUnit" value="${pollDelayUnit}"/>
        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>

        <property name="queueNamePrefix" value="${hz.task.queue.prefix}"/>
    </bean>

    <bean id="taskDao" class="ru.taskurotta.backend.hz.storage.HzTaskDao" init-method="init">
        <constructor-arg name="hzInstance" ref="hzInstance"/>

        <property name="id2TaskMapName" value="${hz.task.map.name}"/>
        <property name="id2TaskDecisionMapName" value="${hz.decision.map.name}"/>
    </bean>

    <bean id="taskBackend" class="ru.taskurotta.backend.storage.GeneralTaskBackend">
        <constructor-arg name="taskDao" ref="taskDao"/>
    </bean>

    <bean id="dependencyBackend" class="ru.taskurotta.backend.hz.dependency.HzDependencyBackend" factory-method="createInstance">
        <constructor-arg name="graphDao" ref="graphDao"/>
    </bean>

    <bean id="graphDao" class="ru.taskurotta.backend.hz.dependency.HzGraphDao">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="graphsMapName" value="${hz.graph.map.name}"/>
        <constructor-arg name="decisionsMapName" value="${hz.graph.decision.map.name}"/>
    </bean>

    <bean id="configBackend" class="ru.taskurotta.backend.hz.config.HzConfigBackend">
        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>
        <constructor-arg name="actorPreferencesMapName" value="actorPreferencesMap"/>
    </bean>

    <bean id="processBackend" class="ru.taskurotta.backend.hz.storage.HzProcessBackend">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
    </bean>

    <!-- /Backends -->

    <!-- Health checks -->
    <bean id="checkTaskServer" class="ru.taskurotta.dropwizard.health.CheckTaskServer">
        <constructor-arg name="name" value="check task server"/>
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <!-- /Health checks -->


    <!-- Task server -->
    <bean id="taskServer" class="ru.taskurotta.backend.hz.server.HazelcastTaskServer" factory-method="createInstance">
        <constructor-arg name="configBackend" ref="configBackend"/>
        <constructor-arg name="dependencyBackend" ref="dependencyBackend"/>
        <constructor-arg name="processBackend" ref="processBackend"/>
        <constructor-arg name="queueBackend" ref="queueBackend"/>
        <constructor-arg name="taskBackend" ref="taskBackend"/>
        <constructor-arg name="brokenProcessBackend" ref="brokenProcessBackend"/>

        <property name="hzInstance" ref="hzInstance"/>
        <property name="nodeCustomName" value="${node.custom.name}"/>
    </bean>

    <bean id="brokenProcessBackend" class="ru.taskurotta.backend.process.MemoryBrokenProcessBackend"/>

    <bean id="metricsDataHandler" class="ru.taskurotta.backend.statistics.MetricsDataHandler"/>

    <!--<bean id="metricsManager" class="ru.taskurotta.backend.statistics.MetricsManager" />-->

    <!--<bean id="dataListener" class="ru.taskurotta.backend.statistics.datalistenerLoggerDataListener"/>-->

    <!--<bean id="taskServer" class="ru.taskurotta.server.MetricsTaskServer" destroy-method="shutdown">-->
    <!--<constructor-arg name="taskServer" ref="hzTaskServer"/>-->
    <!--<constructor-arg name="metricsManager" ref="metricsManager"/>-->
    <!--<constructor-arg name="dataListener" ref="dataListener"/>-->
    <!--</bean>-->
    <!-- /Task server -->


</beans>