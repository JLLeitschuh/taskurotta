<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring-3.1.xsd
            http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">

    <context:property-placeholder/>
    <context:annotation-config/>

    <hz:hazelcast id="hzInstance">
        <hz:config>
            <hz:management-center enabled="${hz.mancenter.enabled}" url="${hz.mancenter.url}"/>

            <hz:properties>
                <hz:property name="hazelcast.logging.type">${hz.logging.type}</hz:property>
                <hz:property name="hazelcast.jmx">${hz.jmx}</hz:property>
                <hz:property name="hazelcast.jmx.detailed">${hz.jmx.detailed}</hz:property>
            </hz:properties>

            <hz:network port="${hz.port}" port-auto-increment="true">
                <hz:join>
                    <hz:multicast enabled="false"/>
                    <hz:tcp-ip enabled="true">
                        <hz:members>${hz.nodes}</hz:members>
                    </hz:tcp-ip>
                </hz:join>
            </hz:network>

            <hz:executor-service name="${hz.dependency.service.name}" pool-size="${hz.dependency.max.pool.size}"/>
            <hz:executor-service name="${hz.decisions.service.name}" pool-size="${hz.decisions.max.pool.size}"/>

            <hz:map name="${hz.task.map.name}" backup-count="0" time-to-live-seconds="0" eviction-policy="LRU"
                    max-idle-seconds="0"
                    max-size="10" eviction-percentage="25" max-size-policy="USED_HEAP_PERCENTAGE">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>

            <hz:map name="${hz.decision.map.name}" backup-count="0" time-to-live-seconds="0" eviction-policy="LRU"
                    max-idle-seconds="0"
                    max-size="10" eviction-percentage="25" max-size-policy="USED_HEAP_PERCENTAGE">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>

            <hz:map name="${hz.graph.map.name}" backup-count="0" time-to-live-seconds="0" eviction-policy="LRU"
                    max-idle-seconds="0"
                    max-size="10" eviction-percentage="25" max-size-policy="USED_HEAP_PERCENTAGE">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>

            <hz:map name="${hz.graph.decision.map.name}" backup-count="0" time-to-live-seconds="0" eviction-policy="LRU"
                    max-idle-seconds="0"
                    max-size="10" eviction-percentage="25" max-size-policy="USED_HEAP_PERCENTAGE">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>

            <hz:map name="${hz.process.map.name}" backup-count="0" time-to-live-seconds="0" eviction-policy="LRU"
                    max-idle-seconds="0"
                    max-size="10" eviction-percentage="25" max-size-policy="USED_HEAP_PERCENTAGE">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>


            <hz:serialization>
                <hz:serializers>
                    <hz:serializer type-class="ru.taskurotta.transport.model.ActorSchedulingOptionsContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.ActorSchedulingOptionsContainerStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.ArgContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.ArgContainerStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.DecisionContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.DecisionContainerStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.backend.hz.dependency.HzGraphDao.DecisionRow"
                                   class-name="ru.taskurotta.backend.hz.serialization.DecisionRowStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.ErrorContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.ErrorContainerStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.backend.dependency.links.Graph"
                                   class-name="ru.taskurotta.backend.hz.serialization.GraphStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.backend.console.model.ProcessVO"
                                   class-name="ru.taskurotta.backend.hz.serialization.ProcessVOStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.TaskContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.TaskContainerStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.backend.hz.TaskKey"
                                   class-name="ru.taskurotta.backend.hz.serialization.TaskKeyStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.TaskOptionsContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.TaskOptionsContainerSerializer"/>
                    <hz:serializer type-class="java.util.UUID"
                                   class-name="ru.taskurotta.backend.hz.serialization.UUIDStreamSerializer"/>
                </hz:serializers>
            </hz:serialization>
        </hz:config>
    </hz:hazelcast>

    <!-- Queues persistence support -->
    <bean id="queueConfigSupport" class="ru.taskurotta.backend.hz.support.HzQueueSpringConfigSupport">

        <constructor-arg name="hzInstance" ref="hzInstance"/>

        <property name="asyncBackupsCount" value="0"/>
        <property name="backupCount" value="0"/>
        <property name="maxSize" value="500000"/>
        <property name="memoryLimit" value="100000"/>
        <property name="binary" value="true"/>
        <property name="bulkLoad" value="500"/>
    </bean>

    <bean class="ru.taskurotta.backend.hz.support.HzMapConfigSpringSupport" id="hzMapConfigSpringSupport">
        <constructor-arg name="hzInstance" ref="hzInstance"/>

        <property name="asyncBackupsCount" value="0"/>
        <property name="backupCount" value="0"/>
        <property name="evictionPercentage" value="10"/>
        <property name="evictionPolicy" value="LRU"/>
        <property name="mapStoreBeanName" value="mongoMapStore"/>
        <property name="timeToLive" value="0"/>
        <property name="maxSize" value="1000"/>
        <property name="maxSizePolicy" value="USED_HEAP_PERCENTAGE"/>
    </bean>

    <bean id="restoreQueueSupport" class="ru.taskurotta.backend.hz.support.HzQueueRestoreSupport" init-method="init">
        <property name="mongoTemplate" ref="mongoTemplate"/>
        <property name="hzInstance" ref="hzInstance"/>
        <property name="queuePrefix" value="${hz.task.queue.prefix}"/>
        <property name="hzQueueSpringConfigSupport" ref="queueConfigSupport"/>
        <property name="restore" value="${hz.queue.restore}"/>
    </bean>
    <!-- /Queues persistence support -->


    <!-- Config support -->
    <bean id="hzConfigBackendSupport" class="ru.taskurotta.backend.hz.support.HzConfigBackendSupport"
          init-method="init">
        <property name="hzInstance" ref="hzInstance"/>
        <property name="queuePrefix" value="${hz.task.queue.prefix}"/>
        <property name="actorPreferencesMapName" value="${hz.actor.preferences.map.name}"/>
    </bean>


    <!--  Actor config support  -->
    <bean id="actorConfigManager" class="ru.taskurotta.backend.hz.config.HzActorConfigManager">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="mongoTemplate" ref="mongoTemplate"/>
        <constructor-arg name="actorConfigName" value="${hz.actor.preferences.map.name}"/>

        <property name="metricsDataRetriever" ref="metricsDataHandler"/>
    </bean>
    <!-- /Actor config support -->


    <!-- Mongo -->
    <mongo:mongo id="mongo" host="${mongo.host}" port="${mongo.port}"/>

    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg ref="mongo"/>
        <constructor-arg name="databaseName" value="${mongo.db.name}"/>
        <property name="writeConcern" ref="writeConcern"/>
    </bean>

    <bean id="writeConcern" class="com.mongodb.WriteConcern">
        <constructor-arg name="w" value="1"/>
        <constructor-arg name="wtimeout" value="0"/>
        <constructor-arg name="fsync" value="true"/>
        <constructor-arg name="j" value="true"/>
    </bean>

    <bean class="ru.taskurotta.spring.mongodb.MongoMapStore" id="mongoMapStore" scope="prototype">
        <property name="mongoTemplate" ref="mongoTemplate"/>
    </bean>
    <!-- /Mongo -->


    <!-- REST resources -->
    <bean id="taskPollerResource" class="ru.taskurotta.dropwizard.resources.TaskPollerResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskReleaserResource" class="ru.taskurotta.dropwizard.resources.TaskReleaserResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskStarterResource" class="ru.taskurotta.dropwizard.resources.TaskStarterResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <!-- /REST resources -->
    <!-- Backends -->
    <bean id="originalQueueBackend" class="ru.taskurotta.backend.hz.queue.HzQueueBackend">
        <constructor-arg name="pollDelay" value="${pollDelay}"/>
        <constructor-arg name="pollDelayUnit" value="${pollDelayUnit}"/>

        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>

        <property name="hzQueueConfigSupport" ref="queueConfigSupport"/>
        <property name="queueNamePrefix" value="${hz.task.queue.prefix}"/>
    </bean>

    <bean id="queueBackend" class="ru.taskurotta.backend.hz.recovery.HzQueueBackendStatistics">
        <constructor-arg name="queueBackend" ref="originalQueueBackend"/>
        <constructor-arg name="hzInstance" ref="hzInstance"/>

        <property name="mergePeriod" value="${hz.recovery.merge.period}"/>
        <property name="mergePeriodTimeUnit" value="${hz.recovery.merge.timeunit}"/>
        <property name="queueNamePrefix" value="${hz.task.queue.prefix}"/>
        <property name="queueSizeMetricPeriodSeconds" value="${metric.queue.size.data.period.seconds}"/>
        <property name="metricsFactory" ref="metricsFactory"/>
        <property name="numberDataListener" ref="metricsNumberDataHandler"/>
    </bean>

    <bean id="metricsFactory" class="ru.taskurotta.backend.statistics.MetricFactory" destroy-method="shutdown">
        <constructor-arg name="dumpPeriod" value="1"/>
        <constructor-arg name="dumpingThreads" value="3"/>
        <constructor-arg name="dataListener" ref="metricsDataHandler"/>
    </bean>

    <bean id="taskDao" class="ru.taskurotta.backend.hz.storage.HzTaskDao">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="id2TaskMapName" value="${hz.task.map.name}"/>
        <constructor-arg name="id2TaskDecisionMapName" value="${hz.decision.map.name}"/>
    </bean>

    <bean id="taskBackend" class="ru.taskurotta.backend.storage.GeneralTaskBackend">
        <constructor-arg name="taskDao" ref="taskDao"/>
    </bean>

    <bean id="dependencyBackend" class="ru.taskurotta.backend.hz.dependency.HzDependencyBackend"
          factory-method="createInstance">
        <constructor-arg name="graphDao" ref="graphDao"/>
    </bean>

    <bean id="graphDao" class="ru.taskurotta.backend.hz.dependency.HzGraphDao">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="graphsMapName" value="${hz.graph.map.name}"/>
        <constructor-arg name="decisionsMapName" value="${hz.graph.decision.map.name}"/>
    </bean>

    <bean id="configBackend" class="ru.taskurotta.backend.hz.config.HzConfigBackend">
        <constructor-arg name="actorPreferencesMapName" value="${hz.actor.preferences.map.name}"/>
        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>
    </bean>

    <bean id="processBackend" class="ru.taskurotta.backend.hz.storage.HzProcessBackend">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <property name="processesStorageMapName" value="${hz.process.map.name}"/>
    </bean>

    <bean id="brokenProcessBackend" class="ru.taskurotta.backend.process.MemoryBrokenProcessBackend">
    </bean>

    <bean id="recoveryProcessBackend" class="ru.taskurotta.backend.recovery.GeneralRecoveryProcessBackend">
        <constructor-arg name="dependencyBackend" ref="dependencyBackend"/>
        <constructor-arg name="processBackend" ref="processBackend"/>
        <constructor-arg name="queueBackendStatistics" ref="queueBackend"/>
        <constructor-arg name="taskBackend" ref="taskBackend"/>
        <constructor-arg name="taskDao" ref="taskDao"/>
        <constructor-arg name="brokenProcessBackend" ref="brokenProcessBackend"/>
        <constructor-arg name="recoveryProcessTimeOut" value="${recovery.process.timeout}"/>
    </bean>

    <!-- /Backends -->

    <!-- Health checks -->
    <bean id="checkTaskServer" class="ru.taskurotta.dropwizard.health.CheckTaskServer">
        <constructor-arg name="name" value="check task server"/>
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <!-- /Health checks -->


    <!-- Task server -->
    <bean id="taskServer" class="ru.taskurotta.backend.hz.server.HazelcastTaskServer">
        <constructor-arg name="configBackend" ref="configBackend"/>
        <constructor-arg name="dependencyBackend" ref="dependencyBackend"/>
        <constructor-arg name="processBackend" ref="processBackend"/>
        <constructor-arg name="queueBackend" ref="queueBackend"/>
        <constructor-arg name="taskBackend" ref="taskBackend"/>
        <constructor-arg name="brokenProcessBackend">
            <null/>
        </constructor-arg>

        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="nodeCustomName" value="${node.custom.name}"/>
        <constructor-arg name="decisionProcessingExecutorService" value="${hz.decisions.service.name}"/>
    </bean>

    <!-- Metrics -->
    <bean id="metricsDataHandler" class="ru.taskurotta.backend.statistics.MetricsDataHandler"/>
    <bean id="metricsNumberDataHandler" class="ru.taskurotta.backend.statistics.NumberDataHandler" init-method="init"/>
    <!-- /Metrics -->

    <!--<bean id="metricsManager" class="ru.taskurotta.backend.statistics.MetricsManager" />-->

    <!--<bean id="dataListener" class="ru.taskurotta.backend.statistics.datalistenerLoggerDataListener"/>-->

    <!--<bean id="taskServer" class="ru.taskurotta.server.MetricsTaskServer" destroy-method="shutdown">-->
    <!--<constructor-arg name="taskServer" ref="hzTaskServer"/>-->
    <!--<constructor-arg name="metricsManager" ref="metricsManager"/>-->
    <!--<constructor-arg name="dataListener" ref="dataListener"/>-->
    <!--</bean>-->
    <!-- /Task server -->


</beans>