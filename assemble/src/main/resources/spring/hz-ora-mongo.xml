<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring-3.1.xsd
            http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">

    <context:property-placeholder/>
    <context:annotation-config/>

    <hz:hazelcast id="hzInstance">
        <hz:config>
            <hz:management-center enabled="${hz.mancenter.enabled}" url="${hz.mancenter.url}"/>

            <hz:properties>
                <hz:property name="hazelcast.logging.type">${hz.logging.type}</hz:property>
                <hz:property name="hazelcast.jmx">${hz.jmx}</hz:property>
                <hz:property name="hazelcast.jmx.detailed">${hz.jmx.detailed}</hz:property>
            </hz:properties>

            <hz:network port="${hz.port}" port-auto-increment="true">
                <hz:join>
                    <hz:multicast enabled="false"/>
                    <hz:tcp-ip enabled="true">
                        <hz:members>${hz.nodes}</hz:members>
                    </hz:tcp-ip>
                </hz:join>
            </hz:network>

            <hz:executor-service name="${hz.dependency.service.name}" pool-size="${hz.dependency.max.pool.size}"/>
            <hz:executor-service name="${hz.decisions.service.name}" pool-size="${hz.decisions.max.pool.size}"/>

            <hz:map name="${hz.task.map.name}" backup-count="0" time-to-live-seconds="5" eviction-policy="LRU"
                    max-size="${hz.map.eviction.size}" eviction-percentage="25">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>

            <hz:map name="${hz.decision.map.name}" backup-count="0" time-to-live-seconds="5" eviction-policy="LRU"
                    max-size="${hz.map.eviction.size}" eviction-percentage="25">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>

            <hz:map name="${hz.graph.map.name}" backup-count="0" time-to-live-seconds="5" eviction-policy="LRU"
                    max-size="${hz.map.eviction.size}" eviction-percentage="25">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>

            <hz:map name="${hz.graph.decision.map.name}" backup-count="0" time-to-live-seconds="5" eviction-policy="LRU"
                    max-size="${hz.map.eviction.size}" eviction-percentage="25">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>

            <hz:map name="${hz.actor.preferences.map.name}" backup-count="0" time-to-live-seconds="5"
                    eviction-policy="LRU" max-size="${hz.map.eviction.size}" eviction-percentage="25">
                <hz:map-store enabled="true" write-delay-seconds="0" implementation="mongoMapStore"/>
            </hz:map>
            <hz:serialization>
                <hz:serializers>
                    <hz:serializer type-class="ru.taskurotta.backend.dependency.links.Graph"
                                   class-name="ru.taskurotta.backend.hz.serialization.GraphStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.backend.hz.dependency.HzGraphDao.DecisionRow"
                                   class-name="ru.taskurotta.backend.hz.serialization.DecisionRowStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.ArgContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.ArgContainerStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.TaskOptionsContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.TaskOptionsContainerSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.ActorSchedulingOptionsContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.ActorSchedulingOptionsContainerStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.ErrorContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.ErrorContainerStreamSerializer"/>
                    <hz:serializer type-class="ru.taskurotta.transport.model.TaskContainer"
                                   class-name="ru.taskurotta.backend.hz.serialization.TaskContainerStreamSerializer"/>
                </hz:serializers>
            </hz:serialization>
        </hz:config>

    </hz:hazelcast>

    <!-- Queues persistence support -->
    <bean id="queueConfigSupport" class="ru.taskurotta.backend.hz.support.HzQueueSpringConfigSupport">

        <constructor-arg name="hzInstance" ref="hzInstance"/>

        <property name="asyncBackupsCount" value="0"/>
        <property name="backupCount" value="0"/>
        <property name="maxSize" value="500000"/>
        <property name="memoryLimit" value="100000"/>
        <property name="binary" value="true"/>
        <property name="bulkLoad" value="500"/>
    </bean>

    <bean class="ru.taskurotta.backend.hz.support.HzMapConfigSpringSupport" id="hzMapConfigSpringSupport">
        <constructor-arg name="hzInstance" ref="hzInstance"/>

        <property name="asyncBackupsCount" value="0"/>
        <property name="backupCount" value="0"/>
        <property name="evictionPercentage" value="25"/>
        <property name="evictionPolicy" value="LRU"/>
        <property name="mapStoreBeanName" value="mongoMapStore"/>
        <property name="timeToLive" value="5"/>
        <property name="maxSize" value="1000"/>
    </bean>

    <bean id="restoreQueueSupport" class="ru.taskurotta.backend.hz.support.HzQueueRestoreSupport" init-method="init">
        <property name="mongoTemplate" ref="mongoTemplate"/>
        <property name="hzInstance" ref="hzInstance"/>
        <property name="queuePrefix" value="${hz.task.queue.prefix}"/>
        <property name="hzQueueSpringConfigSupport" ref="queueConfigSupport"/>
        <property name="restore" value="${hz.queue.restore}"/>
    </bean>
    <!-- /Queues persistence support -->


    <!-- Config support -->
    <bean id="hzConfigBackendSupport" class="ru.taskurotta.backend.hz.support.HzConfigBackendSupport"
          init-method="init">
        <property name="hzInstance" ref="hzInstance"/>
        <property name="queuePrefix" value="${hz.task.queue.prefix}"/>
        <property name="actorPreferencesMapName" value="${hz.actor.preferences.map.name}"/>
    </bean>

    <bean id="actorListResource" class="ru.taskurotta.dropwizard.resources.console.actors.ActorListResource">
        <property name="actorConfigManager" ref="actorConfigManager"/>
        <property name="configBackend" ref="configBackend"/>
    </bean>

    <bean id = "actorCompareResource" class="ru.taskurotta.dropwizard.resources.console.actors.ActorCompareResource">
        <property name="metricsDataRetriever" ref="metricsDataHandler" />
        <property name="actorConfigManager" ref="actorConfigManager" />
    </bean>

    <!-- /Config support -->


    <!--  Actor config support  -->
    <bean id="actorConfigManager" class="ru.taskurotta.backend.hz.config.HzActorConfigManager">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="mongoTemplate" ref="mongoTemplate"/>
        <constructor-arg name="actorConfigName" value="${hz.actor.preferences.map.name}"/>

        <property name="metricsDataRetriever" ref="metricsDataHandler"/>
    </bean>
    <!-- /Actor config support -->


    <!-- Mongo -->
    <mongo:mongo id="mongo" host="${mongo.host}" port="${mongo.port}"/>

    <bean id="mongoTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg ref="mongo"/>
        <constructor-arg name="databaseName" value="${mongo.db.name}"/>
        <property name="writeConcern" ref="writeConcern"/>
    </bean>

    <bean id="writeConcern" class="com.mongodb.WriteConcern">
        <constructor-arg name="w" value="1"/>
        <constructor-arg name="wtimeout" value="0"/>
        <constructor-arg name="fsync" value="true"/>
        <constructor-arg name="j" value="true"/>
    </bean>

    <bean class="com.hazelcast.spring.mongodb.MongoMapStore" id="mongoMapStore" scope="prototype">
        <property name="mongoTemplate" ref="mongoTemplate"/>
    </bean>
    <!-- /Mongo -->


    <!-- REST resources -->
    <bean id="taskPollerResource" class="ru.taskurotta.dropwizard.resources.TaskPollerResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskReleaserResource" class="ru.taskurotta.dropwizard.resources.TaskReleaserResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskStarterResource" class="ru.taskurotta.dropwizard.resources.TaskStarterResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <!-- /REST resources -->


    <!-- Backends -->
    <bean id="originalQueueBackend" class="ru.taskurotta.backend.hz.queue.HzQueueBackend">
        <constructor-arg name="pollDelay" value="${pollDelay}"/>
        <constructor-arg name="pollDelayUnit" value="${pollDelayUnit}"/>

        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>

        <property name="hzQueueConfigSupport" ref="queueConfigSupport"/>
        <property name="hzMapConfigSpringSupport" ref="hzMapConfigSpringSupport"/>
        <property name="queueNamePrefix" value="${hz.task.queue.prefix}"/>
    </bean>


    <bean id="queueBackend" class="ru.taskurotta.backend.hz.recovery.HzQueueBackendStatistics">
        <constructor-arg name="queueBackend" ref="originalQueueBackend"/>
        <constructor-arg name="hzInstance" ref="hzInstance"/>

        <property name="metricsFactory" ref="metricsFactory"/>
        <property name="mergePeriod" value = "${hz.recovery.merge.period}" />
        <property name="mergePeriodTimeUnit" value = "${hz.recovery.merge.timeunit}" />
        <property name="queueNamePrefix" value = "${hz.task.queue.prefix}" />
        <property name="queueSizeMetricPeriodSeconds" value = "${metric.queue.size.data.period.seconds}" />
        <property name="numberDataListener" ref="metricsNumberDataHandler" />
    </bean>

    <bean id="configBackend" class="ru.taskurotta.backend.hz.config.HzConfigBackend">
        <constructor-arg name="actorPreferencesMapName" value="${hz.actor.preferences.map.name}"/>
        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>
    </bean>

    <bean id="taskDao" class="ru.taskurotta.backend.hz.storage.HzTaskDao" init-method="init">
        <constructor-arg name="hzInstance" ref="hzInstance"/>

        <property name="id2TaskMapName" value="${hz.task.map.name}"/>
        <property name="id2TaskDecisionMapName" value="${hz.decision.map.name}"/>
    </bean>

    <bean id="taskBackend" class="ru.taskurotta.backend.storage.GeneralTaskBackend">
        <constructor-arg name="taskDao" ref="taskDao"/>
    </bean>

    <bean id="dependencyBackend" class="ru.taskurotta.backend.hz.dependency.HzDependencyBackend"
          factory-method="createInstance">
        <constructor-arg name="graphDao" ref="graphDao"/>
    </bean>

    <bean id="graphDao" class="ru.taskurotta.backend.hz.dependency.HzGraphDao">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="graphsMapName" value="${hz.graph.map.name}"/>
        <constructor-arg name="decisionsMapName" value="${hz.graph.decision.map.name}"/>
    </bean>

    <bean id="processBackend" class="ru.taskurotta.backend.ora.storage.OraProcessBackend">
        <constructor-arg name="dataSource" ref="dataSource"/>
    </bean>

    <bean id="brokenProcessBackend" class="ru.taskurotta.backend.ora.storage.OraBrokenProcessBackend">
        <property name="dataSource" ref="originalDataSource" />
        <property name="lobHandler" ref="lobHandler" />
    </bean>

    <bean id="lobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" />

    <bean id="recoveryProcessBackend" class="ru.taskurotta.backend.recovery.GeneralRecoveryProcessBackend">
        <constructor-arg name="dependencyBackend" ref="dependencyBackend"/>
        <constructor-arg name="processBackend" ref="processBackend"/>
        <constructor-arg name="queueBackendStatistics" ref="queueBackend"/>
        <constructor-arg name="taskBackend" ref="taskBackend"/>
        <constructor-arg name="taskDao" ref="taskDao"/>
        <constructor-arg name="brokenProcessBackend" ref="brokenProcessBackend"/>
        <constructor-arg name="recoveryProcessTimeOut" value="${recovery.process.timeout}"/>
    </bean>

    <bean id="gcBackend" class="ru.taskurotta.backend.gc.GeneralGCBackend">
        <constructor-arg name="processBackend" ref="processBackend"/>
        <constructor-arg name="graphDao" ref="graphDao"/>
        <constructor-arg name="taskDao" ref="taskDao"/>
    </bean>
    <!-- /Backends -->


    <!-- Health checks -->
    <bean id="checkTaskServer" class="ru.taskurotta.dropwizard.health.CheckTaskServer">
        <constructor-arg name="name" value="check task server"/>
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <!-- /Health checks -->


    <!-- Recovery -->
    <bean id="processRecoveryService" class="ru.taskurotta.recovery.ProcessRecoveryService" init-method="init">
        <property name="dataSource" ref="dataSource"/>
        <property name="hazelcastInstance" ref="hzInstance"/>
        <property name="recoveryProcessBackend" ref="recoveryProcessBackend"/>
        <property name="threadCount" value="${recovery.process.thread.count}"/>
        <property name="useDaemonThreads" value="true"/>
        <property name="processBatchSize" value="${recovery.process.batch.size}"/>
        <property name="startupRecovery" value="${recovery.startup.run}"/>
    </bean>

    <bean id="processRecoveryTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
        <property name="cronExpression" value="${recovery.process.cron}"/>
        <property name="jobDetail">
            <bean class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
                <property name="targetObject" ref="processRecoveryService"/>
                <property name="targetMethod" value="findAndSubmitRecovery"/>
                <property name="concurrent" value="false"/>
            </bean>
        </property>
    </bean>

    <bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
        <property name="triggers">
            <list>
                <ref bean="processRecoveryTrigger"/>
            </list>
        </property>
    </bean>
    <!-- /Recovery -->


    <!-- Task server -->
    <bean id="originalTaskServer" class="ru.taskurotta.backend.hz.server.HazelcastTaskServer"
          factory-method="createInstance">
        <constructor-arg name="configBackend" ref="configBackend"/>
        <constructor-arg name="dependencyBackend" ref="dependencyBackend"/>
        <constructor-arg name="processBackend" ref="processBackend"/>
        <constructor-arg name="queueBackend" ref="queueBackend"/>
        <constructor-arg name="taskBackend" ref="taskBackend"/>
        <constructor-arg name="brokenProcessBackend" ref="brokenProcessBackend" />

        <property name="hzInstance" ref="hzInstance"/>
        <property name="nodeCustomName" value="${node.custom.name}"/>
    </bean>
    <!-- /Task server -->

    <!-- Metrics -->
    <bean id="taskServer" class="ru.taskurotta.server.MetricsTaskServer">
        <constructor-arg name="taskServer" ref="originalTaskServer"/>
        <property name="metricsFactory" ref="metricsFactory"/>
    </bean>

    <bean id="metricsFactory" class="ru.taskurotta.backend.statistics.MetricFactory" destroy-method="shutdown">
        <constructor-arg name="dumpPeriod" value="${metric.method.data.period.seconds}"/>
        <constructor-arg name="dumpingThreads" value="3"/>
        <constructor-arg name="dataListener" ref="metricsDataHandler"/>
    </bean>

    <bean id = "metricsDataHandler" class="ru.taskurotta.backend.statistics.MetricsDataHandler" init-method="init" />
    <bean id = "metricsNumberDataHandler" class="ru.taskurotta.backend.statistics.NumberDataHandler" init-method="init" />
    <!-- /Metrics -->

    <!-- Data source -->
    <bean id="dataSource" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy">
        <constructor-arg name="targetDataSource" ref="originalDataSource"/>
    </bean>

    <bean id="originalDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
        <property name="url" value="${oradb.url}"/>
        <property name="initialSize" value="10"/>
        <property name="maxActive" value="8"/>
        <property name="username" value="${oradb.user}"/>
        <property name="password" value="${oradb.password}"/>
    </bean>
    <!-- /Data source -->


    <!-- Transactions -->
    <bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:advice id="processTransactions" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="startProcess" propagation="REQUIRES_NEW"/>
        </tx:attributes>
    </tx:advice>

    <tx:advice id="brokenProcessTransactions" transaction-manager="txManager">
        <tx:attributes>
            <tx:method name="save" propagation="REQUIRES_NEW"/>
        </tx:attributes>
    </tx:advice>

    <aop:config>
        <aop:pointcut id="serviceOperation"
                      expression="execution(* ru.taskurotta.backend.ora.storage.OraProcessBackend.*(..))"/>
        <aop:pointcut id="brokenProcessOperation"
                      expression="execution(* ru.taskurotta.backend.ora.storage.OraBrokenProcessBackend.*(..))"/>

        <aop:advisor advice-ref="processTransactions" pointcut-ref="serviceOperation"/>
        <aop:advisor advice-ref="brokenProcessTransactions" pointcut-ref="brokenProcessOperation"/>
    </aop:config>
    <!-- /Transactions -->

</beans>