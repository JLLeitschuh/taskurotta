CREATE TABLE TSK_PROCESS (
  process_id    VARCHAR2(36)        NOT NULL,
  start_task_id VARCHAR2(36)        NOT NULL,
  custom_id     VARCHAR2(256)       NULL,
  start_time    NUMBER              NOT NULL,
  end_time      NUMBER              NULL,
  state         NUMBER              NOT NULL,
  return_value  CLOB                NULL,
  START_JSON    CLOB                NULL,
  actor_id      VARCHAR2(500 char)  NOT NULL,
  PRIMARY KEY (process_id)
)
NOCOMPRESS;
-- /TSK_PROCESS

CREATE INDEX TSK_PROCESS_STATE_IDX ON TSK_PROCESS(STATE);
CREATE INDEX TSK_PROCESS_CUSTOM_ID_IDX ON TSK_PROCESS(CUSTOM_ID);
CREATE INDEX TSK_PROCESS_START_TIME_IDX ON TSK_PROCESS(START_TIME);
CREATE INDEX TSK_PROCESS_ACTOR_ID_IDX ON TSK_PROCESS(actor_id);

CREATE TABLE TSK_SCHEDULED
(
  ID                    NUMBER                    NOT NULL,
  NAME                  VARCHAR2(256 char)        NOT NULL,
  CRON                  VARCHAR2(256 char)        NOT NULL,
  STATUS                NUMBER                    NOT NULL,
  JSON                  VARCHAR2(2000 char)       NOT NULL,
  CREATED               TIMESTAMP,
  LIMIT                 NUMBER,
  MAX_ERRORS            NUMBER,
  ERR_COUNT             NUMBER,
  LAST_ERR_MESSAGE      VARCHAR2(2000 char),
  PRIMARY KEY (ID)
);

CREATE SEQUENCE SEQ_TSK_SCHEDULED MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE;

CREATE OR REPLACE TRIGGER TSK_SCHEDULED_BI
BEFORE INSERT
ON TSK_SCHEDULED
FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL
    THEN
      SELECT
        SEQ_TSK_SCHEDULED.NEXTVAL
      INTO :NEW.id
      FROM DUAL;
    END IF;
  END;
/

CREATE TABLE TSK_INTERRUPTED_TASKS (
    ID                NUMBER NOT NULL PRIMARY KEY,
    PROCESS_ID        VARCHAR2(50 char) NOT NULL,
    TASK_ID           VARCHAR2(50 char) NOT NULL,
    STARTER_ID        VARCHAR2(500 char) NOT NULL,
    ACTOR_ID          VARCHAR2(500 char) NOT NULL,
    CREATION_DATE     TIMESTAMP(6) NOT NULL,
    TIME              NUMBER NOT NULL,
    ERROR_MESSAGE     VARCHAR2(500 char),
    ERROR_CLASS_NAME  VARCHAR2(500 char),
    STACK_TRACE       CLOB,
    MESSAGE_FULL      CLOB
);

COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.PROCESS_ID IS 'Interrupted process GUID';
COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.TASK_ID IS 'Interrupted task GUID';
COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.STARTER_ID IS 'Actor ID of process starter actor';
COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.ACTOR_ID IS 'Actor ID of interrupted task';
COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.CREATION_DATE IS 'Row creation date';
COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.TIME IS 'Long representation of a failing time';
COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.ERROR_MESSAGE IS 'Message of the occured actor exception';
COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.ERROR_CLASS_NAME IS 'Full class name for the actor exception';
COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.STACK_TRACE IS 'Full stack trace of the exception got from actor';
COMMENT ON COLUMN TSK_INTERRUPTED_TASKS.MESSAGE_FULL IS 'Full error message text';

CREATE SEQUENCE SEQ_TSK_INTERRUPTED_TASKS MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE;

CREATE OR REPLACE TRIGGER TSK_INTERRUPTED_TASKS_BI
BEFORE INSERT
ON TSK_INTERRUPTED_TASKS
FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL
    THEN
      SELECT
        SEQ_TSK_INTERRUPTED_TASKS.NEXTVAL
      INTO :NEW.id
      FROM DUAL;
    END IF;
  END;
/

CREATE INDEX TSK_INTERRUPTED_TASKS_IP ON TSK_INTERRUPTED_TASKS(STARTER_ID);
CREATE INDEX TSK_INTERRUPTED_TASKS_IA ON TSK_INTERRUPTED_TASKS(ACTOR_ID);
CREATE INDEX TSK_INTERRUPTED_TASKS_IE ON TSK_INTERRUPTED_TASKS(ERROR_CLASS_NAME);

CREATE INDEX TSK_INTERRUPTED_TASKS_ITIME ON TSK_INTERRUPTED_TASKS(TIME);

CREATE TABLE TSK_NFN_TRIGGERS (
  ID                NUMBER NOT NULL PRIMARY KEY,
  TYPE              VARCHAR2(200 char) NOT NULL,
  STATE_JSON        CLOB,
  CFG_JSON          CLOB,
  CHANGE_DATE       TIMESTAMP(6) NOT NULL
);

COMMENT ON COLUMN TSK_NFN_TRIGGERS.ID IS 'Row unique identifier';
COMMENT ON COLUMN TSK_NFN_TRIGGERS.TYPE IS 'Trigger type, for the proper handler use';
COMMENT ON COLUMN TSK_NFN_TRIGGERS.STATE_JSON IS 'JSON representation of the state the trigger was previouslt called';
COMMENT ON COLUMN TSK_NFN_TRIGGERS.CFG_JSON IS 'JSON representation of trigger configuration parameters';
COMMENT ON COLUMN TSK_NFN_TRIGGERS.CHANGE_DATE IS 'Row data change date';

CREATE SEQUENCE SEQ_TSK_NFN_TRIGGERS MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE;

CREATE OR REPLACE TRIGGER TSK_NFN_TRIGGERS_BI
BEFORE INSERT
ON TSK_NFN_TRIGGERS
FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL
    THEN
      SELECT
        SEQ_TSK_NFN_TRIGGERS.NEXTVAL
      INTO :NEW.id
      FROM DUAL;
    END IF;
  END;
/

CREATE TABLE TSK_NFN_SUBSCRIPTIONS (
  ID              NUMBER NOT NULL PRIMARY KEY,
  ACTORS_JSON     CLOB NOT NULL,
  EMAILS_JSON      CLOB NOT NULL,
  CHANGE_DATE     TIMESTAMP(6) NOT NULL
);

COMMENT ON COLUMN TSK_NFN_SUBSCRIPTIONS.ID IS 'Row unique identifier';
COMMENT ON COLUMN TSK_NFN_SUBSCRIPTIONS.ACTORS_JSON IS 'JSON representation of actors list';
COMMENT ON COLUMN TSK_NFN_SUBSCRIPTIONS.EMAILS_JSON IS 'JSON representation of emails list';
COMMENT ON COLUMN TSK_NFN_SUBSCRIPTIONS.CHANGE_DATE IS 'Row data change date';

CREATE SEQUENCE SEQ_TSK_NFN_SUBSCRIPTIONS MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE;

CREATE OR REPLACE TRIGGER TSK_NFN_SUBSCRIPTIONS_BI
BEFORE INSERT
ON TSK_NFN_SUBSCRIPTIONS
FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL
    THEN
      SELECT
        SEQ_TSK_NFN_SUBSCRIPTIONS.NEXTVAL
      INTO :NEW.id
      FROM DUAL;
    END IF;
  END;
/

CREATE TABLE TSK_NFN_LINKS (
  ID                NUMBER NOT NULL PRIMARY KEY,
  SUBSCRIPTION_ID   NUMBER NOT NULL,
  TRIGGER_ID        NUMBER NOT NULL
);

COMMENT ON COLUMN TSK_NFN_LINKS.ID IS 'Row unique identifier';
COMMENT ON COLUMN TSK_NFN_LINKS.SUBSCRIPTION_ID IS 'Foreign key for subscription id';
COMMENT ON COLUMN TSK_NFN_LINKS.TRIGGER_ID IS 'Foreign key for trigger id';

CREATE SEQUENCE SEQ_TSK_NFN_LINKS MINVALUE 1 MAXVALUE 9999999999999999999999999999 INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE;

CREATE OR REPLACE TRIGGER TSK_NFN_LINKS_BI
BEFORE INSERT
ON TSK_NFN_LINKS
FOR EACH ROW
  BEGIN
    IF :NEW.id IS NULL
    THEN
      SELECT
        SEQ_TSK_NFN_LINKS.NEXTVAL
      INTO :NEW.id
      FROM DUAL;
    END IF;
  END;
/

exit;
