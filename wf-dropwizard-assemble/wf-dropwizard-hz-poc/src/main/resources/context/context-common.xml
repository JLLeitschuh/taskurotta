<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
            http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring-2.5.xsd
            http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">

    <context:property-placeholder/>
    <context:annotation-config/>

    <!-- Console HZ debug resources -->
    <bean id = "hzAllInstancesInfo" class="ru.taskurotta.backend.hz.console.HzAllInstancesInfoResource">
        <property name="hzInstance" ref="hzInstance" />
    </bean>
    <bean id = "hzInstanceInfo" class="ru.taskurotta.backend.hz.console.HzInstanceInfoResource">
        <property name="hzInstance" ref="hzInstance" />
    </bean>
    <!-- Console HZ debug resources -->


    <!-- REST resources -->
    <bean id="taskPollerResource" class="ru.taskurotta.dropwizard.resources.TaskPollerResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskReleaserResource" class="ru.taskurotta.dropwizard.resources.TaskReleaserResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskStarterResource" class="ru.taskurotta.dropwizard.resources.TaskStarterResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <!-- /REST resources -->

    <!-- Recoveries -->

    <!--<bean id="expiredTaskRecovery" class="ru.taskurotta.server.recovery.RetryEnqueueRecovery">-->
    <!--<property name="configBackend" ref="configBackend"/>-->
    <!--<property name="taskBackend" ref="taskBackend"/>-->
    <!--<property name="queueBackend" ref="queueBackend"/>-->
    <!--<property name="recoveryPeriod" value="${recovery.period}"/>-->
    <!--<property name="recoveryPeriodUnit" value="${recovery.period.unit}"/>-->
    <!--<property name="timeIterationStep" value="${recovery.timeStep}"/>-->
    <!--<property name="timeIterationStepUnit" value="${recovery.timeStep.unit}"/>-->
    <!--<property name="checkpointServices">-->
    <!--<list value-type="ru.taskurotta.backend.checkpoint.CheckpointService">-->
    <!--<ref bean="checkpointService"/>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--<task:scheduler id="taskExpirationRecovery" pool-size="1" />-->
    <!--<task:scheduled-tasks scheduler="taskExpirationRecovery">-->
    <!--<task:scheduled ref="expiredTaskRecovery" method="run" cron="${recovery.schedule}"/>-->
    <!--</task:scheduled-tasks>-->

    <!--/Recoveries-->


    <bean id="queueBackend" class="ru.taskurotta.backend.hz.queue.HzQueueBackend">
        <constructor-arg name="pollDelay" value="${pollDelay}" />
        <constructor-arg name="pollDelayUnit" value="${pollDelayUnit}" />

        <constructor-arg name="hazelcastInstance" ref="hzInstance" />

        <property name="queueListName" value = "queueListName" />
    </bean>

    <bean id="taskDao" class="ru.taskurotta.backend.hz.storage.HzTaskDao" >
        <constructor-arg name="hzInstance" ref="hzInstance" />

        <property name="id2TaskMapName" value="${hz.task.map.name}" />
        <property name="id2TaskDecisionMapName" value = "${hz.decision.map.name}" />
    </bean>

    <bean id="taskBackend" class="ru.taskurotta.backend.storage.GeneralTaskBackend">
        <constructor-arg name="taskDao" ref="taskDao" />
    </bean>

    <bean id="dependencyBackend"
          class="ru.taskurotta.backend.dependency.GeneralDependencyBackend">
        <constructor-arg name="graphDao" ref="graphDao" />
        <constructor-arg name="retryTimes" value="${retryTimes}" />
    </bean>

    <bean id="graphDao" class="ru.taskurotta.backend.hz.dependency.HzGraphDao" >
        <constructor-arg name="hzInstance" ref="hzInstance" />
    </bean>

    <bean id="processBackend" class="ru.taskurotta.backend.hz.storage.HzProcessBackend" >
        <constructor-arg name="hzInstance" ref="hzInstance" />
        <property name="processesStorageMapName" value="${hz.processes.map.name}" />
    </bean>

    <!--<bean id="configBackend" class="ru.taskurotta.dropwizard.server.YamlConfigBackend" />-->
    <bean id="configBackend" class="ru.taskurotta.backend.hz.config.HzConfigBackend" >
        <constructor-arg ref="hzInstance"/>
    </bean>

    <!-- Health checks -->
    <bean id="checkTaskServer" class="ru.taskurotta.dropwizard.health.CheckTaskServer">
        <constructor-arg name="name" value="check task server" />
        <property name="taskServer" ref="taskServer" />
    </bean>
    <!-- /Health checks -->

</beans>