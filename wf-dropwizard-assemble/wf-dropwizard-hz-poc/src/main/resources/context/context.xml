<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:hz="http://www.hazelcast.com/schema/spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd

            http://www.hazelcast.com/schema/spring http://www.hazelcast.com/schema/spring/hazelcast-spring-2.5.xsd">

    <context:property-placeholder/>
    <context:annotation-config/>

    <bean id="taskServer" class="ru.taskurotta.backend.hz.server.HazelcastTaskServer" factory-method="createInstance">
        <constructor-arg name="configBackend" ref="configBackend"/>
        <constructor-arg name="dependencyBackend" ref="dependencyBackend"/>
        <constructor-arg name="processBackend" ref="processBackend"/>
        <constructor-arg name="queueBackend" ref="queueBackend"/>
        <constructor-arg name="taskBackend" ref="taskBackend"/>

        <property name="hzInstance" ref="hzInstance"/>
        <property name="nodeCustomName" value="${node.custom.name}"/>

    </bean>

    <!-- REST resources -->
    <bean id="taskPollerResource" class="ru.taskurotta.dropwizard.resources.TaskPollerResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskReleaserResource" class="ru.taskurotta.dropwizard.resources.TaskReleaserResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <bean id="taskStarterResource" class="ru.taskurotta.dropwizard.resources.TaskStarterResource">
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <!-- /REST resources -->

    <!-- Recoveries -->

    <!--<bean id="expiredTaskRecovery" class="ru.taskurotta.server.recovery.RetryEnqueueRecovery">-->
    <!--<property name="configBackend" ref="configBackend"/>-->
    <!--<property name="taskBackend" ref="taskBackend"/>-->
    <!--<property name="queueBackend" ref="queueBackend"/>-->
    <!--<property name="recoveryPeriod" value="${recovery.period}"/>-->
    <!--<property name="recoveryPeriodUnit" value="${recovery.period.unit}"/>-->
    <!--<property name="timeIterationStep" value="${recovery.timeStep}"/>-->
    <!--<property name="timeIterationStepUnit" value="${recovery.timeStep.unit}"/>-->
    <!--<property name="checkpointServices">-->
    <!--<list value-type="ru.taskurotta.backend.checkpoint.CheckpointService">-->
    <!--<ref bean="checkpointService"/>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!--<task:scheduler id="taskExpirationRecovery" pool-size="1" />-->
    <!--<task:scheduled-tasks scheduler="taskExpirationRecovery">-->
    <!--<task:scheduled ref="expiredTaskRecovery" method="run" cron="${recovery.schedule}"/>-->
    <!--</task:scheduled-tasks>-->

    <!--/Recoveries-->


    <bean id="queueBackend" class="ru.taskurotta.backend.hz.queue.HzQueueBackend">
        <constructor-arg name="pollDelay" value="${pollDelay}"/>
        <constructor-arg name="pollDelayUnit" value="${pollDelayUnit}"/>

        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>

        <property name="queueListName" value="queueListName"/>
        <property name="checkpointService" ref="checkpointService"/>
    </bean>

    <bean id="taskDao" class="ru.taskurotta.backend.hz.storage.HzTaskDao">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
    </bean>

    <bean id="checkpointService" class="ru.taskurotta.backend.hz.checkpoint.HzCheckpointService">
        <property name="hzInstance" ref="hzInstance"/>
    </bean>

    <bean id="taskBackend" class="ru.taskurotta.backend.storage.GeneralTaskBackend">
        <constructor-arg name="taskDao" ref="taskDao"/>
        <constructor-arg name="checkpointService" ref="checkpointService"/>
    </bean>

    <bean id="dependencyBackend"
          class="ru.taskurotta.backend.dependency.GeneralDependencyBackend">
        <constructor-arg name="graphDao" ref="graphDao"/>
        <constructor-arg name="retryTimes" value="${retryTimes}"/>
    </bean>

    <bean id="graphDao" class="ru.taskurotta.backend.hz.dependency.HzGraphDao">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
    </bean>

    <bean id="processBackend" class="ru.taskurotta.backend.hz.storage.HzProcessBackend">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <property name="checkpointService" ref="checkpointService"/>
    </bean>

    <bean id="configBackend" class="ru.taskurotta.dropwizard.server.YamlConfigBackend"/>

    <!-- Health checks -->
    <bean id="checkTaskServer" class="ru.taskurotta.dropwizard.health.CheckTaskServer">
        <constructor-arg name="name" value="check task server"/>
        <property name="taskServer" ref="taskServer"/>
    </bean>
    <!-- /Health checks -->

    <!-- Console HZ debug resources -->
    <bean id="hzAllInstancesInfo" class="ru.taskurotta.backend.hz.console.HzAllInstancesInfoResource">
        <property name="hzInstance" ref="hzInstance"/>
    </bean>
    <bean id="hzInstanceInfo" class="ru.taskurotta.backend.hz.console.HzInstanceInfoResource">
        <property name="hzInstance" ref="hzInstance"/>
    </bean>
    <!-- C/onsole HZ debug resources -->

    <beans profile="default">
        <hz:hazelcast id="hzInstance">
            <hz:config>
                <hz:management-center enabled="${hz.mancenter.enabled}" url="${hz.mancenter.url}"/>
                <hz:properties>
                    <hz:property name="hazelcast.logging.type">${hazelcast.logging.type}</hz:property>
                    <hz:property name="hazelcast.jmx">${hazelcast.jmx}</hz:property>
                    <hz:property name="hazelcast.jmx.detailed">${hazelcast.jmx.detailed}</hz:property>
                </hz:properties>
                <hz:network port="${hz.port}" port-auto-increment="true">
                    <hz:join>
                        <hz:multicast enabled="false"/>
                        <hz:tcp-ip enabled="true">
                            <hz:members>
                                localhost:7773,localhost:7774,localhost:7775,localhost:7776,localhost:7777,localhost:7778,localhost:7779
                            </hz:members>
                        </hz:tcp-ip>
                    </hz:join>
                </hz:network>
                <hz:executor-service name="${hz.decisions.service.name}" core-pool-size="${hz.decisions.core.pool.size}"
                                     max-pool-size="${hz.decisions.max.pool.size}"/>
            </hz:config>
        </hz:hazelcast>
    </beans>

    <beans profile="hzMongo">
        <hz:hazelcast id="hzInstance">
            <hz:config>
                <hz:properties>
                    <hz:property name="hazelcast.logging.type">${hazelcast.logging.type}</hz:property>
                    <hz:property name="hazelcast.jmx">${hazelcast.jmx}</hz:property>
                    <hz:property name="hazelcast.jmx.detailed">${hazelcast.jmx.detailed}</hz:property>
                </hz:properties>
                <hz:network port="${hz.port}" port-auto-increment="true">
                    <hz:join>
                        <hz:multicast enabled="false"/>
                        <hz:tcp-ip enabled="true">
                            <hz:members>
                                localhost:7773,localhost:7774,localhost:7775,localhost:7776,localhost:7777,localhost:7778,localhost:7779
                            </hz:members>
                        </hz:tcp-ip>
                    </hz:join>
                </hz:network>
                <hz:executor-service name="${hz.decisions.service.name}" core-pool-size="${hz.decisions.core.pool.size}"
                                     max-pool-size="${hz.decisions.max.pool.size}"/>
                <hz:map name="id2TaskMap" max-size="1000" eviction-percentage="50" eviction-policy="LRU">
                    <hz:map-store enabled="true" implementation="tasks_mongomapstore" write-delay-seconds="1"/>
                </hz:map>
                <hz:map name="id2TaskDecisionMap" max-size="1000" eviction-percentage="50" eviction-policy="LRU">
                    <hz:map-store enabled="true" implementation="decision_mongomapstore" write-delay-seconds="1"/>
                </hz:map>
                <hz:map name="processesStorage" max-size="1000" eviction-percentage="50" eviction-policy="LRU">
                    <hz:map-store enabled="true" implementation="processes_mongomapstore" write-delay-seconds="1"/>
                </hz:map>
                <hz:map name="tsQueuesList" max-size="1000" eviction-percentage="50" eviction-policy="LRU">
                    <hz:map-store enabled="true" implementation="queues_mongomapstore" write-delay-seconds="1"/>
                </hz:map>
                <hz:map name="graphsMapName" max-size="1000" eviction-percentage="50" eviction-policy="LRU">
                    <hz:map-store enabled="true" implementation="graph_mongomapstore" write-delay-seconds="1"/>
                </hz:map>
                <hz:map name="decisionsMapName" max-size="1000" eviction-percentage="50" eviction-policy="LRU">
                    <hz:map-store enabled="true" implementation="graphdecision_mongomapstore" write-delay-seconds="1"/>
                </hz:map>
                <hz:map name="processGraphMap" max-size="1000" eviction-percentage="50" eviction-policy="LRU">
                    <hz:map-store enabled="true" implementation="processGraph_mongomapstore" write-delay-seconds="1"/>
                </hz:map>
            </hz:config>
        </hz:hazelcast>
        <bean id="mongo" class="com.mongodb.Mongo">
            <constructor-arg name="host" value="127.0.0.1"/>
        </bean>

        <bean id="writeConcern" class="com.mongodb.WriteConcern">
            <constructor-arg name="w" value="-1"/>
            <constructor-arg name="wtimeout" value="0"/>
            <constructor-arg name="fsync" value="false"/>
            <constructor-arg name="j" value="false"/>
        </bean>

        <bean id="mongoTemplate"
              class="org.springframework.data.mongodb.core.MongoTemplate">
            <constructor-arg ref="mongo"/>
            <constructor-arg name="databaseName" value="taskurotta_hz"/>
            <property name="writeConcern" ref="writeConcern"/>
        </bean>
        <bean class="com.hazelcast.spring.mongodb.MongoMapStore" id="processGraph_mongomapstore">
            <property name="mongoTemplate" ref="mongoTemplate"/>
        </bean>
        <bean class="com.hazelcast.spring.mongodb.MongoMapStore" id="graphdecision_mongomapstore">
            <property name="mongoTemplate" ref="mongoTemplate"/>
        </bean>
        <bean class="com.hazelcast.spring.mongodb.MongoMapStore" id="graph_mongomapstore">
            <property name="mongoTemplate" ref="mongoTemplate"/>
        </bean>
        <bean class="com.hazelcast.spring.mongodb.MongoMapStore" id="queues_mongomapstore">
            <property name="mongoTemplate" ref="mongoTemplate"/>
        </bean>
        <bean class="com.hazelcast.spring.mongodb.MongoMapStore" id="processes_mongomapstore">
            <property name="mongoTemplate" ref="mongoTemplate"/>
        </bean>
        <bean class="com.hazelcast.spring.mongodb.MongoMapStore" id="tasks_mongomapstore">
            <property name="mongoTemplate" ref="mongoTemplate"/>
        </bean>
        <bean class="com.hazelcast.spring.mongodb.MongoMapStore" id="decision_mongomapstore">
            <property name="mongoTemplate" ref="mongoTemplate"/>
        </bean>
    </beans>


</beans>