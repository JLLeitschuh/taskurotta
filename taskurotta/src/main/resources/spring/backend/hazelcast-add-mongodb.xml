<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- Backends -->
    <bean id="taskDao" class="ru.taskurotta.service.hz.storage.MongoTaskDao">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="id2TaskMapName" value="${hz.map.task.name}"/>
        <constructor-arg name="id2TaskDecisionMapName" value="${hz.map.decision.name}"/>
        <constructor-arg name="mongoDB" ref="mongoDB"/>
        <constructor-arg name="bSerializationService" ref="bSerializationService"/>
        <constructor-arg name="decisionCollectionName" value="${hz.map.decision.name}"/>
    </bean>

    <bean id="mongoGraphDao" class="ru.taskurotta.service.hz.dependency.MongoGraphDao">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="graphsMapName" value="${hz.map.graph.name}"/>
        <constructor-arg name="mongoDB" ref="mongoDB"/>
        <constructor-arg name="bSerializationService" ref="bSerializationService"/>
    </bean>
    <!-- /Backends -->

    <!-- Queues persistence support -->

    <bean id="queueFactoryForQueueBackend" class="ru.taskurotta.hazelcast.queue.delay.DefaultQueueFactory">
        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>
        <constructor-arg name="storageFactory" ref="storageFactoryForQueueBackend"/>
    </bean>

    <bean id="restoreQueueSupport" class="ru.taskurotta.hazelcast.store.HzQueueRestoreSupport" init-method="init">
        <property name="mongoDB" ref="mongoDB"/>
        <property name="queuePrefix" value="${hz.queue.task.prefix}"/>
        <property name="hzInstance" ref="hzInstance"/>
        <property name="restore" value="${hz.queue.restore}"/>
    </bean>

    <bean id="queueFactoryForGC" class="ru.taskurotta.hazelcast.queue.delay.DefaultQueueFactory">
        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>
        <constructor-arg name="storageFactory" ref="storageFactoryForGC"/>
    </bean>

    <!-- /Queues persistence support -->

    <!-- Delay queue support -->
    <bean id="storageFactoryForQueueBackend" class="ru.taskurotta.hazelcast.queue.delay.MongoStorageFactory">
        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>
        <constructor-arg name="mongoDB" ref="mongoDB"/>
        <constructor-arg name="storagePrefix" value="${dq.storage-prefix}"/>
        <constructor-arg name="scheduleDelayMillis">
            <bean class="ru.taskurotta.util.DurationParser" factory-method="toMillis">
                <constructor-arg name="duration" value="${dq.schedule}"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="batchLoadSize" value="${hz.queue.delay.batch-load-size}"/>
        <constructor-arg name="bSerializationService" ref="bSerializationService"/>
        <constructor-arg name="objectClassName" value="ru.taskurotta.service.queue.TaskQueueItem"/>
    </bean>

    <bean id="storageFactoryForGC" class="ru.taskurotta.hazelcast.queue.delay.MongoStorageFactory">
        <constructor-arg name="hazelcastInstance" ref="hzInstance"/>
        <constructor-arg name="mongoDB" ref="mongoDB"/>
        <constructor-arg name="storagePrefix" value="${gc.dq.storage-prefix}"/>
        <constructor-arg name="scheduleDelayMillis">
            <bean class="ru.taskurotta.util.DurationParser" factory-method="toMillis">
                <constructor-arg name="duration" value="${gc.dq.schedule}"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="batchLoadSize" value="${hz.queue.delay.batch-load-size}"/>
        <constructor-arg name="bSerializationService" ref="bSerializationService"/>
        <constructor-arg name="objectClassName" value="java.util.UUID"/>
    </bean>
    <!-- /Delay queue support -->

    <!-- Services -->

    <bean id="processService" class="ru.taskurotta.service.hz.storage.MongoProcessService">
        <constructor-arg name="hzInstance" ref="hzInstance"/>
        <constructor-arg name="processesStorageMapName" value="${hz.map.process.name}"/>
        <constructor-arg name="mongoDB" ref="mongoDB"/>
        <constructor-arg name="bSerializationService" ref="bSerializationService"/>
    </bean>

    <bean id="incompleteTaskFinder" class="ru.taskurotta.service.hz.recovery.IncompleteTaskFinder">
        <constructor-arg name="recoveryService" ref="recoveryService"/>
        <constructor-arg name="taskDao" ref="taskDao"/>
        <constructor-arg name="incompleteTaskFindTimeout">
            <bean class="ru.taskurotta.util.DurationParser" factory-method="toMillis">
                <constructor-arg name="duration" value="${recovery.task.find-timeout}"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="batchSize" value="${recovery.task.batch-size}"/>
        <constructor-arg name="nodeLock" ref="recoveryTaskNodeLock"/>
        <constructor-arg name="enabled" value="${recovery.task.enabled}"/>
    </bean>

    <bean id="lostProcessCleaner" class="ru.taskurotta.service.hz.gc.LostProcessCleaner">
        <constructor-arg name="processService" ref="processService"/>
        <constructor-arg name="garbageCollectorService" ref="garbageCollectorService"/>
        <constructor-arg name="lostProcessFindTimeout">
            <bean class="ru.taskurotta.util.DurationParser" factory-method="toMillis">
                <constructor-arg name="duration" value="${gc.lost-process.find-timeout}"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="batchSize" value="${gc.lost-process.batch-size}"/>
        <constructor-arg name="timeBeforeDeleteFinishedProcess">
            <bean class="ru.taskurotta.util.DurationParser" factory-method="toMillis">
                <constructor-arg name="duration" value="${gc.process.finished.wait-before-delete}"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="timeBeforeDeleteAbortedProcess">
            <bean class="ru.taskurotta.util.DurationParser" factory-method="toMillis">
                <constructor-arg name="duration" value="${gc.process.aborted.wait-before-delete}"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="enabled" value="${gc.lost-process.enabled}"/>
        <constructor-arg name="gcEnabled" value="${gc.enabled}"/>
        <constructor-arg name="nodeLock" ref="gcLostProcessNodeLock"/>
    </bean>

    <bean id="lostGraphCleaner" class="ru.taskurotta.service.hz.gc.LostGraphCleaner">
        <constructor-arg name="graphDao" ref="mongoGraphDao"/>
        <constructor-arg name="processService" ref="processService"/>
        <constructor-arg name="garbageCollectorService" ref="garbageCollectorService"/>
        <constructor-arg name="lostGraphFindTimeout">
            <bean class="ru.taskurotta.util.DurationParser" factory-method="toMillis">
                <constructor-arg name="duration"  value="${gc.lost-graph.find-timeout}"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="batchSize" value="${gc.lost-graph.batch-size}"/>
        <constructor-arg name="incompleteProcessTimeout">
            <bean class="ru.taskurotta.util.DurationParser" factory-method="toMillis">
                <constructor-arg name="duration"  value="${recovery.process.incomplete-timeout}"/>
            </bean>
        </constructor-arg>
        <constructor-arg name="enabled" value="${gc.lost-graph.enabled}"/>
        <constructor-arg name="gcEnabled" value="${gc.enabled}"/>
        <constructor-arg name="nodeLock" ref="gcLostGraphNodeLock"/>
    </bean>
    <!-- /Services -->

    <!-- Services support -->
    <bean id = "hzInterruptedTasksSupport" class="ru.taskurotta.service.hz.support.HzInterruptedTasksRestoreSupport" init-method="init">
        <property name="hzInstance" ref="hzInstance" />
        <property name="mapName" value="${hz.map.interrupted-store.name}" />
        <property name="mongoDb" ref="mongoDB" />
        <property name="restore" value="${hz.map.interrupted-store.restore}" />
        <property name="serializationService" ref="bSerializationService" />
        <property name="interruptedTasksService" ref="interruptedTasksService" />
    </bean>
    <!-- /Services support -->

</beans>